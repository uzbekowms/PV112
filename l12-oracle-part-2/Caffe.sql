--SELECT 
--    DISTINCT column_1
--from 
--    table;

CREATE TABLE t_names (
    c_name VARCHAR(50)
);

INSERT INTO t_names ( c_name ) VALUES ( 'Aaron' );

INSERT INTO t_names ( c_name ) VALUES ( 'Doe' );

INSERT INTO t_names ( c_name ) VALUES ( 'John' );

INSERT INTO t_names ( c_name ) VALUES ( 'Mary' );

INSERT INTO t_names ( c_name ) VALUES ( 'Petro' );

INSERT INTO t_names ( c_name ) VALUES ( NULL );

SELECT
    *
FROM
    t_names;

SELECT DISTINCT
    c_name
FROM
    t_names
ORDER BY
    c_name DESC NULLS LAST;

CREATE TABLE t_full_names (
    c_name      VARCHAR(50),
    c_last_name VARCHAR(50)
);

INSERT INTO t_full_names (
    c_name,
    c_last_name
) VALUES (
    'Aaron',
    'C'
);

INSERT INTO t_full_names (
    c_name,
    c_last_name
) VALUES (
    'Doe',
    'B'
);

INSERT INTO t_full_names (
    c_name,
    c_last_name
) VALUES (
    'John',
    'D'
);

INSERT INTO t_full_names (
    c_name,
    c_last_name
) VALUES (
    'Mary',
    'A'
);

INSERT INTO t_full_names (
    c_name,
    c_last_name
) VALUES ( 'Petro' );

INSERT INTO t_full_names (
    c_name,
    c_last_name
) VALUES (
    'Second',
    NULL
);

SELECT
    *
FROM
    t_full_names;

SELECT
    *
FROM
    t_full_names
ORDER BY
    c_name DESC,
    c_last_name DESC;

SELECT
    concat('A', 'B')
FROM
    dual;

SELECT
    concat(concat(c_name, ' '),
           c_last_name) full_name
FROM
    t_full_names
ORDER BY
    full_name;

SELECT
    concat(concat(c_name, ' '),
           c_last_name) full_name
FROM
    t_full_names
ORDER BY
    full_name
OFFSET 1 ROWS FETCH FIRST 3 ROWS ONLY;

-- FETCH [NEXT, FIRST] <number> [ROW, ROWS] [ONLY, WITH TIES]



CREATE TABLE t_fetch_example (
    c_number INTEGER
);

INSERT INTO t_fetch_example ( c_number ) VALUES ( 5 );

SELECT
    *
FROM
    t_fetch_example;

SELECT
    *
FROM
    t_fetch_example
ORDER BY
    c_number
FETCH FIRST 7 ROWS WITH TIES; -- ONLY



SELECT
    *
FROM
    t_fetch_example
FETCH FIRST 10 PERCENT ROWS ONLY; -- ONLY



SELECT
    *
FROM
    t_full_names;

SELECT
    *
FROM
    t_full_names
WHERE
    c_last_name IS NOT NULL;

CREATE TABLE table_a (
    id   INTEGER
        GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50) NOT NULL,
    PRIMARY KEY ( id )
);

CREATE TABLE table_b (
    id                INTEGER
        GENERATED BY DEFAULT AS IDENTITY,
    parent_element_id INTEGER,
    name              VARCHAR(50) NOT NULL,
    PRIMARY KEY ( id ),
    CONSTRAINT fk_parent_element FOREIGN KEY ( parent_element_id )
        REFERENCES table_a ( id )
);

INSERT INTO table_a ( name ) VALUES ( 'Element 5' );

INSERT INTO table_b (
    parent_element_id,
    name
) VALUES (
    NULL,
    'Child Element 10'
);

SELECT
    *
FROM
    table_a,
    table_b
WHERE
    table_a.id = table_b.parent_element_id;

SELECT
    a.id                id_a,
    a.name              name_a,
    b.id                id_b,
    b.name              name_b,
    b.parent_element_id b_parent
FROM
         table_a a
    INNER JOIN table_b b ON a.id = b.parent_element_id;

SELECT
    a.id                id_a,
    a.name              name_a,
    b.id                id_b,
    b.name              name_b,
    b.parent_element_id b_parent
FROM
    table_a a
    LEFT JOIN table_b b ON 1 = 1
                           AND a.id = b.parent_element_id
                           AND 1 = 1;

SELECT
    *
FROM
         table_a
    INNER JOIN table_b USING ( id );

SELECT
    a.id                id_a,
    a.name              name_a,
    b.id                id_b,
    b.name              name_b,
    b.parent_element_id b_parent
FROM
    table_a a
    RIGHT JOIN table_b b ON a.id = b.parent_element_id;

SELECT
    a.id                id_a,
    a.name              name_a,
    b.id                id_b,
    b.name              name_b,
    b.parent_element_id b_parent
FROM
    table_a a
    FULL OUTER JOIN table_b b ON a.id = b.parent_element_id;

CREATE TABLE warehouses (
    warehouse_id   NUMBER
        GENERATED BY DEFAULT AS IDENTITY START WITH 10
    PRIMARY KEY,
    warehouse_name VARCHAR(255),
    location_id    NUMBER(12, 0), -- fk
    CONSTRAINT fk_warehouses_locations FOREIGN KEY ( location_id )
        REFERENCES locations ( location_id )
            ON DELETE CASCADE
);

CREATE TABLE inventories (
    product_id   NUMBER(12, 0), -- fk
    warehouse_id NUMBER(12, 0), -- fk
    quantity     NUMBER(8, 0) NOT NULL,
    CONSTRAINT pk_inventories PRIMARY KEY ( product_id,
                                            warehouse_id ),
    CONSTRAINT fk_inventories_products FOREIGN KEY ( product_id )
        REFERENCES products ( product_id )
            ON DELETE CASCADE,
    CONSTRAINT fk_inventories_warehouses FOREIGN KEY ( warehouse_id )
        REFERENCES warehouses ( warehouse_id )
            ON DELETE CASCADE
);

SELECT
    product_id,
    warehouse_id,
    round(dbms_random.value(10, 100)) quantity
FROM
         products
    CROSS JOIN warehouses;

CREATE TABLE categories (
    id        INTEGER
        GENERATED BY DEFAULT AS IDENTITY,
    name      VARCHAR(50) NOT NULL,
    parent_id INTEGER,
    PRIMARY KEY ( id ),
    CONSTRAINT fk_parent_category FOREIGN KEY ( parent_id )
        REFERENCES categories ( id )
);

INSERT INTO categories (
    name,
    parent_id
) VALUES (
    'PlayGPU',
    3
);

SELECT
    *
FROM
         categories c
    INNER JOIN categories c_child ON c.id = c_child.parent_id;

CREATE TABLE products (
    id          INTEGER
        GENERATED BY DEFAULT AS IDENTITY,
    name        VARCHAR(50) NOT NULL,
    category_id INTEGER,
    PRIMARY KEY ( id ),
    CONSTRAINT fk_category FOREIGN KEY ( category_id )
        REFERENCES categories ( id )
);

INSERT INTO products (
    name,
    category_id
) VALUES (
    'something',
    5
);

SELECT
    *
FROM
    products;

SELECT
    category_id,
    COUNT(id)
FROM
    products
GROUP BY
    category_id;

SELECT
    c.name,
    COUNT(p.id) c_count
FROM
         products p
    INNER JOIN categories c ON p.category_id = c.id
GROUP BY
    c.name
HAVING
    c_count > 3;

CREATE TABLE orders (
    order_id   INTEGER,
    item_id    INTEGER,
    product_id INTEGER,
    quantity   INTEGER,
    unit_price FLOAT
);

DROP TABLE orders;

INSERT INTO orders (
    order_id,
    item_id,
    product_id,
    quantity,
    unit_price
) VALUES (
    dbms_random.value(1, 10),
    dbms_random.value(1, 10),
    dbms_random.value(1, 10),
    dbms_random.value(1, 10),
    dbms_random.value(1, 10)
);

SELECT
    *
FROM
    orders;

SELECT
    product_id,
    SUM(unit_price * quantity) order_value
FROM
    orders
GROUP BY
    product_id
HAVING
    SUM(unit_price * quantity) > 60
ORDER BY
    order_value DESC;

SELECT
    MAX(unit_price)
FROM
    orders;

SELECT
    *
FROM
    orders
ORDER BY
    unit_price DESC
FETCH FIRST 1 ROW WITH TIES;

SELECT
    *
FROM
    orders
WHERE
    unit_price = (
        SELECT
            MAX(unit_price)
        FROM
            orders
    );

SELECT
    order_id,
    round((
        SELECT
            AVG(unit_price)
        FROM
            orders o1
        WHERE
            o1.product_id = o2.product_id
    ),
          2) avg_price
FROM
    orders o2
ORDER BY
    item_id;

SELECT
    order_value
FROM
    (
        SELECT
            product_id,
            SUM(unit_price * quantity) order_value
        FROM
            orders
        GROUP BY
            product_id
        HAVING
            SUM(unit_price * quantity) > 60
        ORDER BY
            order_value DESC
    )
FETCH FIRST 3 ROWS ONLY;

SELECT
    *
FROM
    orders
WHERE
    unit_price > (
        SELECT
            AVG(unit_price)
        FROM
            orders
    )
ORDER BY
    unit_price;

SELECT
    AVG(unit_price)
FROM
    orders;

SELECT
    *
FROM
    orders
WHERE
    order_id IN (
        SELECT
            AVG(unit_price)
        FROM
            orders
    )
ORDER BY
    unit_price;

SELECT
    *
FROM
    orders
WHERE
    NOT EXISTS (
        SELECT
            NULL
        FROM
            dual
    );

SELECT
    *
FROM
    orders
WHERE
    item_id IN ( NULL );
    
-- operator ANY(v1,v2,v3)
-- operator ANY(subquery)


SELECT
    *
FROM
    table_name
WHERE
    c > ANY ( v1,
              v2,
              v3 );

SELECT
    *
FROM
    table_name
WHERE
    c > SOME ( v1,
               v2,
               v3 );

SELECT
    *
FROM
    table_name
WHERE
    c > v1
    OR c > v2
    OR c > v3;

SELECT
    *
FROM
    orders
WHERE
    unit_price > ANY ( 2.5,
                       1.2,
                       4.6 )
ORDER BY
    unit_price;

SELECT
    *
FROM
    orders o1
WHERE
    order_id = ANY (
        SELECT
            order_id
        FROM
            orders o2
        WHERE
                o2.quantity > 5
            AND o1.order_id = o2.order_id
    )
ORDER BY
    unit_price;
    
-- > >= < <= = !=

SELECT
    *
FROM
    table_name
WHERE
    c > ALL ( v1,
              v2,
              v3 );

SELECT
    *
FROM
    table_name
WHERE
        c > v1
    AND c > v2
    AND c > v3;
    
-- UNION

SELECT
    *
FROM
    categories
UNION
SELECT
    *
FROM
    products;


SELECT
    *
FROM
    categories
UNION ALL
SELECT
    *
FROM
    products;
    